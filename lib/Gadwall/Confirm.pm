package Gadwall::Confirm;

use Mojo::Base 'Gadwall::Controller';

use Mojo::Util;
use MIME::Base64 qw(encode_base64);

# This bridge function allows access only if the request is accompanied
# by a valid confirmation token generated by us for this link and user.
# If the token has been tampered with (i.e. the signature is wrong), or
# if the token itself is invalid (most likely because it has been used
# already), or if the token has expired, it returns a 403 response.

sub by_url {
    my $self = shift;

    # Do we have a token with a valid signature?
    my ($tok, $sig) = split /:/, $self->param('t'), 2;
    unless ($tok && $sig && $sig eq
            Mojo::Util::hmac_md5_sum($tok, $self->app->secret))
    {
        return $self->denied;
    }

    my $row = $self->app->db->selectrow_hashref(
        "delete from confirmation_tokens where token=? returning *, ".
        "age(issued_at,current_timestamp)>interval '1 hour' as expired",
        {}, $tok
    );

    # Is the token itself (still?) valid, and does it authorise this
    # request?
    unless ($row && !$row->{expired} &&
            $row->{path} eq $self->req->url->path)
    {
        return $self->denied;
    }

    # Can't find anything to complain about.
    $self->stash(user_id => $row->{user_id});
    return 1;
}

# This function takes a request URL and a user id and generates a link
# that the above bridge will accept.

sub generate_url {
    my ($self, $path, $uid) = @_;

    my $dbh = $self->app->db;

    # We delete any tokens for this (path,uid) combination that are more
    # than 15 minutes old and insert a new token. The insert may fail if
    # by some incredible chance the same pseudorandom value was inserted
    # earlier (if so, we retry with a different token), or if (much more
    # likely) there is a token for this (path,uid) that was *not* more
    # than 15 minutes old.

    my ($rv, $token);
    do {
        $dbh->begin_work;
        eval {
            local $dbh->{RaiseError} = 1;
            my $old = $dbh->do(
                "delete from confirmation_tokens where path=? and user_id=? ".
                "and age(issued_at,current_timestamp)>interval '15 minutes'",
                {}, $path, $uid
            );
            $token = encode_base64($main::prng->get_bits(128), "");
            $rv = $dbh->do(
                "insert into confirmation_tokens (token, path, user_id) ".
                "values (?, ?, ?)", {}, $token, $path, $uid
            );
            $dbh->commit;
        };
        if ($@) {
            my $err = $dbh->errstr;
            eval { $dbh->rollback };
            return unless $err =~ /duplicate key.*confirmation_tokens_pkey/;
            $rv = undef;
        }
    }
    until defined $rv;

    my $url = $self->canonical_url('https', $path);
    $token .= ":".Mojo::Util::hmac_md5_sum($token, $self->app->secret);
    $url->query->param(t => $token);

    return $url;
}

1;
